---
title: git notes
layout: post
tags: [git]
---

This post contains my notes while reading chapter 2 of Pro Git.

### Nifty Commands


######1. Short Status

{% highlight shell %}
$ git status --short # -s

 M README           # Modified but not staged
MM Rakefile         # Some changes staged, some not
A  lib/git.rb       # New file added for staging
M  lib/simplegit.rb # Modifications staged
?? LICENSE.txt      # Untracked file
{% endhighlight %}

There are two columns to the output, first one shows the file is stages, second
shows the file is modified.

######2. Ignoring files

git uses [Blob Patterns](http://ankitsultana/me) in it's `.gitignore` files.
Some important rules you should know are explained through examples below:

{% highlight shell %}
$ cat .gitignore

# Start with / to avoid recursivity
/TODO    # Ignore TODO file only in the current dir not in subdir/TODO

*.out    # Ignore all files that end with .out
# Say you don't want to ignore a file that ends with out
!somename.out # Don't ignore somename.out

# Ignore doc/notes.txt but not doc/server/arch.txt
doc/*.txt

# Ignore all pdf files in directory doc
doc/**/*.pdf

{% endhighlight %}

######3. Diff

Again I will let the code do the talking:

{% highlight shell %}
$ git diff  # Compare b/w working directory and staging area

$ git diff --staged  # Compare b/w staging area and last commit
{% endhighlight %}

One noteworthy point is that `--cached` and `--staged` are synonyms. (as
mentioned in git help, which can be invoked by executing `git help diff`)

**Note:** that `git diff` won't show you untracked files.

######4. Removing/Unstaging Files

Okay so quickly:

{% highlight shell %}
$ git rm filename.txt # removes the file from your working tree, and also stages its deletion.
$ git rm --cached filename.txt # stages the deletion, leaves file in working tree
$ git reset filename.txt # Unstages any staged changes for given file
{% endhighlight %}

**Warning:** Use a `\` before you use the wild card character `*` since git
does its own filename expansion in addition to the shell's. So if you want to
remove all `.log` files from the `log/` directory, do:

{% highlight shell %}
$ git rm log/\*.log
{% endhighlight %}
######5. Git Log

`git log` lists the list of commits in reverse chronological order. There are a
number of options to it:

{% highlight shell %}
$ git log -p -2  # -p for the difference introduced, -2 => the last two commits

$ git --stat     # Abbreviated stats

$ git log --pretty=oneline
{% endhighlight %}

######6. Amend

Sometime you commit a bit too early, and then realize that you could have added
another file in the previous commit. You can use `git commit --ammend` for that:

{% highlight shell %}
$ git commit --ammend
{% endhighlight %}

Essentialy, it overwrites the previous commit with a commit that contains the
changes of the previous commit and the currently staged files.

**Note:** Never amend commits that have been pushed to a public repo.

######7. Unstaging Files

Use:

{% highlight shell %}
$ git reset HEAD filename
{% endhighlight %}

to unstage a file

######8. Unmodifying a modified file

Say you commit a file `abc.html`. Now you made some changes to it. If you want
to revert back to the state it was in after the last commit, do:

{% highlight shell %}
$ git checkout -- abc.html
{% endhighlight %}

**Note:** Once you use `checkout` in this way, all the changes you had undone
are gone


### Working with remotes

Let's start with some commands:

{% highlight shell %}
# Add a remote
$ git remote add shortname url

# Fetch from a remote
$ git fetch shortname
# Now you have shortname's branches available at
# shortname/branchname
# You can either merge your branch with any of
# them or you can checkout them for inspection.
{% endhighlight %}

`git pull` fetches data from the remote tracking branch and merges into your
current branch


TODO: Revert uncommited changes: http://stackoverflow.com/questions/5807137/git-how-to-revert-uncommitted-changes-including-files-and-folders
